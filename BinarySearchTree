class Node:
    def __init__(self,data,parent):
        self.data = data
        self.left_node = None
        self.right_node = None
        self.parent = None

class BinarySearchTree:

    def __init__(self):
        self.root = None

    def remove(self,data):
        if self.root:
            self.remove_node(data,self.root)

    def insert(self,data):
        if self.root is None:
            self.root = Node(data, None)
        else:
            self.insert_node(data,self.root)

    def insert_node(self , data , node):
        if data<node.data:
            if node.left_node:
                self.insert_node(data ,node.left_node)
            else:
                 node.left_node = Node(data,node)
        else:
            if node.right_node:
                self.insert_node(data,node.right_node)
            else:
                node.right_node = Node(data,node)

    def remove_node(self,data,node):
        if data>node.data:
            self.remove_node(data, node.right_node)
        elif data<node.data:
            self.remove_node(data,node.left_node)
        else:
            if node.left_node is None and  node.right_node is None:
                print("Removing a node  %d" + str(node.data))

                parent = node.parent
                if parent.right_node == node:
                    parent.right_node=None
                elif parent.left_node ==node:
                    parent.left_node==None
                if parent is None:
                    self.root =None

                del node
            elif node.left_node is None and node.right_node is not None:
                parent = node.parent
                if parent:
                    if parent.right_node == node:
                        parent.right_node = node.right_node

                    elif parent.left_node == node:
                        parent.left_node = node.right_node
                else:
                    self.root = node.right_node

                node.right_node.parent = parent
                del node
            elif node.left_node is not None and node.right_node is None:
                parent = node.parent
                if parent:
                    if parent.right_node== node:
                        parent.right_node = node.left_node
                    elif parent.left_node == node:
                        parent.left_node = node.left_node
                else:
                    self.root = None

                node.left_node.parent = parent
                del node
            else:
                predecessor = self.get_predecessor(node.left_node)
                temp = predecessor.data
                predecessor.data = node.data
                node.data=temp
                self.remove_node(data,predecessor)


    def get_predecessor(self,node):
        if node.right_node:
            return self.get_prossedor(node.right_node)
        return node

    def get_min_node(self):
        if self.root:
            self.get_min_value(self.root)
    def get_min_value(self,node):
        if node.left_node:
            self.get_min_value(node.left_node)
        return node.data
    def get_max_node(self):
        if self.root:
            self.get_max_value(self.root)
    def get_max_value(self,node):
        if node.right_node:
            self.get_max_value(node.right_node)
        return node.data

    def traverse(self):
        if self.root is not None:
            self.traverse_in_order(self.root)
    def traverse_in_order(self,node):
        if node.left_node:
            self.traverse_in_order(node.left_node)
        print(node.data)
        if node.right_node:
            self.traverse_in_order(node.right_node)


if __name__ == '__main__':
    bst =BinarySearchTree()
    bst.insert(-12)
    bst.insert(5)
    bst.insert(44)
    bst.insert(3)
    bst.insert(21)
    bst.get_max_node()
    bst.get_min_node()
    bst.traverse()
    bst.remove(5)
    bst.traverse()
